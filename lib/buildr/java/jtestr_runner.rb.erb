# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with this
# work for additional information regarding copyright ownership.  The ASF
# licenses this file to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations under
# the License.

#  ___   ___     _  _  ___ _____    ___ ___ ___ _____    _____ _  _ ___ ___ 
# |   \ / _ \   | \| |/ _ \_   _|  | __|   \_ _|_   _|  |_   _| || |_ _/ __|
# | |) | (_) |  | .` | (_) || |    | _|| |) | |  | |      | | | __ || |\__ \
# |___/ \___/   |_|\_|\___/ |_|    |___|___/___| |_|      |_| |_||_|___|___/
#                                                                          
#  ___ ___ _    ___ 
# | __|_ _| |  | __|  CHANGES TO THIS FILE WILL BE LOST
# | _| | || |__| _|   AUTO-GENERATED BY BUILDR on <%= Time.now %>
# |_| |___|____|___|  PREFER TO EDIT JtestR CONFIGURATION FILE:
#
# <%= user_config %>
                  
begin
  require 'jruby'
  <%= dependencies.map(&:to_s).inspect %>.each { |dep| $CLASSPATH << dep }
  require '<%= File.join(File.dirname(runner_erb), "jtestr_result_handler") %>'

  jtestr = JtestR::TestRunner.new

  class << jtestr
    def config(&block)
      @config_blocks ||= []
      @config_blocks << block if block
      @config_blocks
    end
    
    def load_configuration
      super
      config.each { |block| @configuration.instance_eval(&block) }
    end
  end

  jtestr.config do 
    classpath [] # already loaded
    add_common_classpath false
  
    <% ts = ( @jtestr_tests[:junit] & tests ).map { |c| 'Java.' + c } %>
    junit [<%= ts.join(', ') %>]
  
    <% ts = ( @jtestr_tests[:testng] & tests ).map { |c| 'Java.' + c } %>
    testng [<%= ts.join(', ') %>]
  
    <% ts = @jtestr_tests[:testunit] & tests %>
    test_unit <%= ts.inspect %>
  
    <% ts = @jtestr_tests[:story] & tests %>
    story <%= ts.inspect %>
  
    <% ts = @jtestr_tests[:rspec] & tests %>
    rspec <%= ts.inspect %>
  
    <% ts = @jtestr_tests[:expect] & tests %>
    expectations <%= ts.inspect %>
  
    ignore __FILE__
  
    if File.file?(<%= user_config.inspect %>)
      ignore <%= user_config.inspect %>
      load <%= user_config.inspect %>
    end
  end # config

  args =  [ '<%= spec_dir %>' ] # the directory to search for jtestr files
  args << JtestR::SimpleLogger::ERR # log level
  args << JtestR::GenericResultHandler::QUIET # verbose level
  <% if options[:output] == false %>
    args << StringIO.new # output
  <% elsif options[:output].kind_of?(String) %>
    args << File.open('<%= options[:output] %>')
  <% else %>
    args << STDOUT # output
  <% end %>
  args << [] # groups_to_run
  args << JtestR::YAMLResultHandler # result handler

  JtestR::YAMLResultHandler.report_to('<%= yaml_report %>')
  JtestR::YAMLResultHandler.tests = <%= tests.inspect %>
  jtestr.run *args

rescue => e
  File.open('<%= yaml_report %>', "w") do |f| 
    f.write YAML.dump({:error => { :message => e.message, :backtrace => e.backtrace}})
  end
end


# Local Variables:
# mode: ruby
# End:

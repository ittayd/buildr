h1. Getting Started

h2.  Installing Buildr

More information about "downloading and installing Buildr":download.html.


h2. Conventions

Lines that start with @$@ are command lines, for example:

{{{!sh
$ # Run Buildr
$ buildr
}}}

Lines that start with @=>@ show output from the console or the result of a
method, for example:

{{{!sh
puts 'Hello world'
=> "Hello world"
}}}

And as you guessed, everything else is Buildfile Ruby or Java code.  You can
figure out which language is which.



h2. Running Buildr

You need a *Buildfile*, a build script that tells Buildr all about the projects
it's building, what they contain, what to produce, and so on.  The Buildfile
resides in the root directory of your project.  We'll talk more about it in
"the next chapter":projects.html.  If you don't already have one, ask Buildr to
create it:

{{{!sh
$ buildr
}}}

p(tip). You'll notice that Buildr creates a file called @buildfile@.  It's
case sensitive, but Buildr will look for either @buildfile@ or @Buildfile@.
You can also use @Rakefile@ or @rakefile@ for compatibility with previous
versions of Buildr.

You use Buildr by running the @buildr@ command:

{{{!sh
$ buildr [options] [tasks] [name=value]
}}}

There are several options you can use, for a full list of options type:

{{{!sh
$ buildr --help
}}}

|_. Option                  |_. Usage |
| @-f/--buildfile [file]@   | Specify the buildfile.                                  |
| @-e/--environment [name]@ | Environment name (e.g. development, test, production).  |
| @-h/--help@               | Display this help message.                              |
| @-n/--nosearch@           | Do not search parent directories for the buildfile.     |
| @-q/--quiet@              | Do not log messages to standard output.                 |
| @-r/--require [file]@     | Require MODULE before executing buildfile.              |
| @-t/--trace@              | Turn on invoke/execute tracing, enable full backtrace.  |
| @-v/--version@            | Display the program version.                            |

You can tell Buildr to run specific tasks and the order to run them.  For
example:

{{{!sh
# Clean and rebuild
buildr clean build
# Package and install
buildr install
}}}

If you don't specify a task, Buildr will run the "@build@ task":building.html,
compiling source code and running test cases.  Running a task may run other
tasks as well, for example, running the @install@ task will also run @package@.

There are several "environment
variables":settings_profiles.html#environment_variables that let you control
how Buildr works, for example, to skip test cases during a build, or specify
options for the JVM.  Depending on the variable, you may want to set it once in
your environment, or set a different value each time you run Buildr.

For example:

{{{!sh
$ export JAVA_OPTS='-Xms1g -Xmx1g'
$ buildr TEST=no
}}}


h2. Help Tasks

Buildr includes a number of informative tasks.  Currently that number stands
at two, but we'll be adding more tasks in future releases.

To start with, type:

{{{!sh
$ buildr help
}}}

You can list the name and description of all your projects using the
@help:projects@ task.  For example:

{{{!sh
$ buildr help:projects
killer-app                 # Code. Build. ??? Profit!
killer-app:teh-api         # Abstract classes and interfaces
killer-app:teh-impl        # All those implementation details
killer-app:la-web          # What our users see
}}}

You are, of course, describing your projects for the sake of those who will
maintain your code, right?  To describe a project, or a task, call the @desc@
method before the project or task definition.

So next let's talk about "projects":projects.html.


h2. More Info

*API* The "Buildr API":http://incubator.apache.org/buildr/rdoc/index.html
documentation.

*Rake* Buildr is based on Rake, a Ruby build system that handles tasks and
dependencies.  Check out the "Rake documentation":http://docs.rubyrake.org/ for
more information.

*AntWrap* Buildr uses AntWrap, for configuring and running Ant tasks.  You can
learn more from the "Antwrap documentation":http://antwrap.rubyforge.org/.

*YAML* Buildr uses YAML for its profiles.  You can "learn more about YAML
here":http://www.yaml.org, and use this handy "YAML quick
reference":http://www.yaml.org/refcard.html.
